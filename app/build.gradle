plugins {
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id 'java'
  id 'application'
  id 'jacoco'
  //id 'com.github.spotbugs' version '5.0.12'
}


repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation "org.mockito:mockito-inline:+"
    testImplementation 'io.cucumber:cucumber-java:7.5.0'
    testImplementation 'io.cucumber:cucumber-junit:7.5.0'
    testImplementation 'org.assertj:assertj-swing:3.17.1'
    
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'info.picocli:picocli:4.6.3'
    
}

application {
    mainClass = 'pipboss.App'
}


jar {
    archiveBaseName = 'app'
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}


shadowJar {
   archiveBaseName.set(rootProject.name)
   archiveClassifier.set('')
   archiveVersion.set('')
}

tasks.named('test') {
    useJUnitPlatform()
}

run {
    standardInput = System.in
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            mainClass = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--plugin', 'html:build/reports/cucumber/index.html', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-proc:none', '-Xlint:unchecked', '-Xlint:deprecation']
}

gradle.taskGraph.beforeTask { task ->
    if (task.name.toLowerCase().contains('spotbugs')) {
      task.effort = 'max'
      task.reportLevel = 'low'
      task.reports {
        html.enabled = true
        html.destination = file('$buildDir/reports/spotbugs/main/spotbugs.html')
        html.stylesheet = 'fancy-hist.xsl'
        xml.enabled = false
      }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}